{"version":3,"sources":["services/rawQuestionData.js","utils/CustomPropTypes/validMultipleInputAnswersObj.js","utils/propTypesObjs/propTypesForInputs.js","components/inputs/RadioQues.jsx","components/inputs/TextQues.jsx","components/inputs/NumberQues.jsx","components/inputs/SelectOptionQues.jsx","constants/inputTypes.js","components/InputsContainer.jsx","components/QuestionaireContainer.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["rawQuestionData","label","name","type","answers","value","content","validMultipleInputAnswersObj","allPassedProps","currentValidatedPropName","currentComponentName","currentValidatedProp","undefined","Array","isArray","Error","some","ele","forEach","answer","PropTypesForChoosingInputs","components","propTypes","className","PropTypes","string","isRequired","PropTypesForTypingInputs","RadioQues","index","map","key","TextQues","htmlFor","id","NumberQues","SelectOptionQuest","inputTypes","text","inputData","number","radio","select","SelectOptionQues","InputContainerSection","styled","div","SubmitBtn","BotWarningLabel","InputsContainer","rest","questionData","MainContainer","MainContainerTitle","h2","MainContainerSubTitle","h3","QuestionaireContainer","TopHalfBackground","FooterText","App","Fragment","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f03fe59b.chunk.js","sourcesContent":["export const rawQuestionData = [\r\n  {\r\n    label: \"What's your name ?\",\r\n    name: \"name\",\r\n    type: \"text\"\r\n  },\r\n  {\r\n    label: \"How old are you ?\",\r\n    name: \"age\",\r\n    type: \"number\"\r\n  },\r\n  {\r\n    label: \"Training Program:\",\r\n    name: \"training-program\",\r\n    type: \"radio\",\r\n    answers: [\r\n      {\r\n        value: \"new dev\",\r\n        content: \"New Dev\"\r\n      },\r\n      {\r\n        value: \"intern\",\r\n        content: \"Intern\"\r\n      },\r\n      {\r\n        value: \"naitei\",\r\n        content: \"Naitei\"\r\n      },\r\n      {\r\n        value: \"practice\",\r\n        content: \"Practice\"\r\n      },\r\n      {\r\n        value: \"open education\",\r\n        content: \"Open Education\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: \"How long have you joined the training program ?\",\r\n    name: \"training-time\",\r\n    type: \"radio\",\r\n    answers: [\r\n      {\r\n        value: \"less than 1 month\",\r\n        content: \"Less than 1 month\"\r\n      },\r\n      {\r\n        value: \"1 month ~ 6 months\",\r\n        content: \"1 month ~ 6 months\"\r\n      },\r\n      {\r\n        value: \"more than 6 months\",\r\n        content: \"more than 6 months\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label: \"Who is your trainer ?\",\r\n    name: \"trainer\",\r\n    type: \"text\"\r\n  },\r\n  {\r\n    label: \"Generally, you are satisfied with your trainer:\",\r\n    name: \"satisfaction-with-trainer\",\r\n    type: \"select\",\r\n    answers: [\r\n      {\r\n        value: \"1\",\r\n        content: \"1\"\r\n      },\r\n      {\r\n        value: \"2\",\r\n        content: \"2\"\r\n      },\r\n      {\r\n        value: \"3\",\r\n        content: \"3\"\r\n      },\r\n      {\r\n        value: \"4\",\r\n        content: \"4\"\r\n      }\r\n    ]\r\n  }\r\n];\r\n","export const validMultipleInputAnswersObj = (\r\n  allPassedProps,\r\n  currentValidatedPropName,\r\n  currentComponentName\r\n) => {\r\n  const currentValidatedProp = allPassedProps[currentValidatedPropName];\r\n  const arrOfObj = arr => !arr.some(ele => typeof ele !== \"object\");\r\n\r\n  if (\r\n    currentValidatedProp === undefined ||\r\n    !Array.isArray(currentValidatedProp)\r\n  ) {\r\n    throw new Error(\r\n      `The prop \"${currentValidatedPropName}\" is marked as required as well as to be an array, but its value is \"${currentValidatedProp}\" (in \"${currentComponentName}\" component).`\r\n    );\r\n  }\r\n\r\n  if (!arrOfObj(currentValidatedProp)) {\r\n    throw new Error(\r\n      `The prop \"${currentValidatedPropName}\" is supposed to be an \"array of objects\" (in \"${currentComponentName}\" component).`\r\n    );\r\n  }\r\n\r\n  currentValidatedProp.forEach(answer => {\r\n    if (answer.value === undefined || answer.content === undefined) {\r\n      throw new Error(\r\n        `each property of \"${currentValidatedPropName}\" prop should contain both \"value\" as well as \"content\" properties (in \"${currentComponentName}\" component).`\r\n      );\r\n    }\r\n\r\n    if (typeof answer.value !== \"string\") {\r\n      throw new Error(\r\n        `property \"value\" of each property of \"${currentValidatedPropName}\" prop is supposed to be a string (in \"${currentComponentName}\" component).`\r\n      );\r\n    }\r\n\r\n    if (typeof answer.content !== \"string\") {\r\n      throw new Error(\r\n        `property \"content\" of each property of \"${currentValidatedPropName}\" prop is supposed to be a string (in \"${currentComponentName}\" component).`\r\n      );\r\n    }\r\n  });\r\n};\r\n","import { PropTypes } from \"prop-types\";\r\nimport { validMultipleInputAnswersObj } from \"./../CustomPropTypes/validMultipleInputAnswersObj\";\r\n\r\nexport const PropTypesForChoosingInputs = components => {\r\n  components.propTypes = {\r\n    className: PropTypes.string,\r\n    name: PropTypes.string.isRequired,\r\n    answers: validMultipleInputAnswersObj,\r\n    label: PropTypes.string.isRequired\r\n  };\r\n};\r\n\r\nexport const PropTypesForTypingInputs = components => {\r\n  components.propTypes = {\r\n    className: PropTypes.string,\r\n    name: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { PropTypesForChoosingInputs } from \"./../../utils/propTypesObjs/propTypesForInputs\";\r\n\r\nconst RadioQues = ({ className, name, answers, label, index }) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label className=\"form-label\">\r\n        {index && `${index}.`} {label}\r\n      </label>\r\n      {answers &&\r\n        Array.isArray(answers) &&\r\n        answers.map((answer, index) => (\r\n          <label key={index} className=\"radio-input-container\">\r\n            <span className=\"capitalize radio-input-content\">\r\n              {answer.content}\r\n            </span>\r\n            <input\r\n              type=\"radio\"\r\n              className={className}\r\n              name={name}\r\n              value={answer.value}\r\n            />\r\n            <span className=\"radio-input-demonstrator\"></span>\r\n          </label>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nPropTypesForChoosingInputs(RadioQues);\r\n\r\nexport default RadioQues;\r\n","import React from \"react\";\r\n\r\nimport { PropTypesForTypingInputs } from \"./../../utils/propTypesObjs/propTypesForInputs\";\r\n\r\nconst TextQues = ({ className, name, label, index }) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name} className=\"form-label\">\r\n        {index && `${index}.`} {label}\r\n      </label>\r\n      <input\r\n        type={\"text\"}\r\n        className={`form-control ${className}`}\r\n        name={name}\r\n        id={name}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nPropTypesForTypingInputs(TextQues);\r\n\r\nexport default TextQues;\r\n","import React from \"react\";\r\n\r\nimport { PropTypesForTypingInputs } from \"./../../utils/propTypesObjs/propTypesForInputs\";\r\n\r\nconst NumberQues = ({ className, name, label, index }) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name} className=\"form-label\">\r\n        {index && `${index}.`} {label}\r\n      </label>\r\n      <input\r\n        type={\"number\"}\r\n        className={`form-control ${className}`}\r\n        name={name}\r\n        id={name}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nPropTypesForTypingInputs(NumberQues);\r\n\r\nexport default NumberQues;\r\n","import React from \"react\";\r\n\r\nimport { PropTypesForChoosingInputs } from \"./../../utils/propTypesObjs/propTypesForInputs\";\r\n\r\nconst SelectOptionQuest = ({ className, name, answers, label, index }) => {\r\n  return (\r\n    <div className=\"form-group\">\r\n      <label htmlFor={name} className=\"form-label\">\r\n        {index && `${index}.`} {label}\r\n      </label>\r\n      <select className={`form-control ${className}`} name={name} id={name}>\r\n        {answers &&\r\n          Array.isArray(answers) &&\r\n          answers.map((answer, index) => (\r\n            <option className=\"capitalize\" key={index} value={answer.value}>\r\n              {answer.content}\r\n            </option>\r\n          ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nPropTypesForChoosingInputs(SelectOptionQuest);\r\n\r\nexport default SelectOptionQuest;\r\n","import React from \"react\";\r\n\r\nimport RadioQues from \"./../components/inputs/RadioQues\";\r\nimport TextQues from \"./../components/inputs/TextQues\";\r\nimport NumberQues from \"../components/inputs/NumberQues\";\r\nimport SelectOptionQuest from \"./../components/inputs/SelectOptionQues\";\r\n\r\nexport const inputTypes = {\r\n  text: (inputData, index) => (\r\n    <TextQues {...inputData} index={index + 1} key={index} />\r\n  ),\r\n  number: (inputData, index) => (\r\n    <NumberQues {...inputData} index={index + 1} key={index} />\r\n  ),\r\n  radio: (inputData, index) => (\r\n    <RadioQues {...inputData} index={index + 1} key={index} />\r\n  ),\r\n  select: (inputData, index) => (\r\n    <SelectOptionQuest {...inputData} index={index + 1} key={index} />\r\n  )\r\n};\r\n","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { rawQuestionData } from \"./../services/rawQuestionData\";\r\nimport { inputTypes } from \"./../constants/inputTypes\";\r\n// import SelectOptionQuest from \"./SelectOptionQues\";\r\n// import RadioQues from \"./RadioQues\";\r\n// import TextQues from \"./TextQues\";\r\n// import NumberQues from \"./NumberQues\";\r\n\r\nconst InputContainerSection = styled.div`\r\n  margin-top: 78px;\r\n`;\r\n\r\nconst SubmitBtn = styled.div`\r\n  border: none;\r\n  padding: 13px 20px;\r\n  font-size: 16px;\r\n  border-radius: 8px;\r\n  background: #02bad6;\r\n  display: table;\r\n  color: white;\r\n  cursor: pointer;\r\n\r\n  -webkit-transition: 0.2s;\r\n  -moz-transition: 0.2s;\r\n  transition: 0.2s;\r\n\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(1.2);\r\n  }\r\n`;\r\n\r\nconst BotWarningLabel = styled.label`\r\n  color: #bbb8c5;\r\n  font-size: 15px;\r\n  display: inline-block;\r\n  margin-top: 20px;\r\n`;\r\n\r\nconst InputsContainer = ({ ...rest }) => {\r\n  return (\r\n    <InputContainerSection {...rest}>\r\n      {rawQuestionData.map((questionData, index) =>\r\n        inputTypes[questionData.type](questionData, index)\r\n      )}\r\n      <SubmitBtn>Submit</SubmitBtn>\r\n      <BotWarningLabel>\r\n        Never submit passwords through Google Forms\r\n      </BotWarningLabel>\r\n    </InputContainerSection>\r\n  );\r\n};\r\n\r\nexport default InputsContainer;\r\n","import React from \"react\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport InputsContainer from \"./InputsContainer\";\r\n\r\nconst MainContainer = styled.div`\r\n  position: relative;\r\n  max-width: 850px;\r\n  background: white;\r\n  margin: 50px auto 60px auto;\r\n  padding: 50px 45px 30px 45px;\r\n\r\n  -webkit-box-shadow: 0px 0px 18px -10px rgba(0, 0, 0, 0.75);\r\n  -moz-box-shadow: 0px 0px 18px -10px rgba(0, 0, 0, 0.75);\r\n  box-shadow: 0px 0px 18px -10px rgba(0, 0, 0, 0.75);\r\n\r\n  &:before {\r\n    content: \" \";\r\n    width: 100%;\r\n    height: 8px;\r\n    background: #b387f7;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n  }\r\n`;\r\n\r\nconst MainContainerTitle = styled.h2`\r\n  color: #424242;\r\n  font-size: 35px;\r\n  text-transform: capitalize;\r\n  position: relative;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst MainContainerSubTitle = styled.h3`\r\n  font-size: 15px;\r\n  font-weight: normal;\r\n`;\r\n\r\nconst QuestionaireContainer = () => {\r\n  return (\r\n    <MainContainer>\r\n      <MainContainerTitle>Framgia survey form</MainContainerTitle>\r\n      <MainContainerSubTitle>\r\n        After submitting this form, you will be a framgia member\r\n      </MainContainerSubTitle>\r\n      <InputsContainer />\r\n    </MainContainer>\r\n  );\r\n};\r\n\r\nexport default QuestionaireContainer;\r\n","import React from \"react\";\n\nimport styled from \"styled-components\";\n\nimport QuestionaireContainer from \"./QuestionaireContainer\";\n\nconst TopHalfBackground = styled.div`\n  background: #653fb8;\n  height: 150px;\n  width: 100%;\n  position: -webkit-fixed;\n  position: -moz-fixed;\n  position: fixed;\n  top: 0px;\n  left: 0px;\n`;\n\nconst FooterText = styled.div`\n  text-align: center;\n  margin-bottom: 30px;\n`;\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <TopHalfBackground />\n      <QuestionaireContainer />\n      <FooterText>\n        <p>\n          This content is neither created nor endorsed by Framgia Report Abuse -\n          Terms & Services - Additional Terms\n        </p>\n        <img\n          src=\"https://sun-asterisk.vn/wp-content/uploads/2019/03/Sun-Logotype-RGB-01.png\"\n          alt=\"framgia-logo\"\n        />\n      </FooterText>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles/index.css\";\n\nimport App from \"./components/App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}